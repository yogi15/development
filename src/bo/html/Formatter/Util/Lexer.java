/* The following code was generated by JFlex 1.3.5 on 12/4/14 11:48 AM */

/*
 *
 * Copyright (c) 2000 by Calypso Technology, Inc.
 * 595 Market Street, Suite 1980, San Francisco, CA  94105, U.S.A.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Calypso Technology, Inc. ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Calypso Technology.
 *
 */
// use with JFlex version 1.3.5 or later
// NOPMD: this is generated

package bo.html.Formatter.Util;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 12/4/14 11:48 AM from the specification file
 * <tt>file:/F:/eclipse/workspace/yogeshSBI/src/resources/bo/html/Formatter/Util/lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CALYPSO = 1;
  final public static int YYINITIAL = 0;
  final public static int GENERATED = 3;
  final public static int IGNORE = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\20"+
    "\1\13\1\16\1\4\1\0\1\70\1\0\1\64\1\65\2\0\1\76"+
    "\1\10\1\11\1\15\1\6\1\46\1\50\1\51\5\7\1\47\1\30"+
    "\1\101\1\17\1\66\1\32\2\0\1\22\1\102\1\21\1\4\1\12"+
    "\1\61\1\34\1\4\1\33\1\4\1\74\1\23\1\71\1\35\1\27"+
    "\1\72\1\4\1\36\1\45\1\60\4\4\1\73\1\4\1\0\1\14"+
    "\2\0\1\4\1\0\1\42\1\102\1\56\1\44\1\40\1\53\1\37"+
    "\1\4\1\52\1\4\1\75\1\55\1\62\1\41\1\54\1\25\1\4"+
    "\1\31\1\26\1\43\1\57\1\63\2\4\1\24\1\4\1\77\1\67"+
    "\1\100\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0"+
    "\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\5\5\4"+
    "\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0\236\4"+
    "\11\0\46\4\2\0\1\4\7\0\47\4\11\0\55\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\4\5\0\3\4"+
    "\15\0\4\5\7\0\1\4\4\0\13\5\5\0\53\4\37\5\4\0"+
    "\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5"+
    "\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4"+
    "\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\5\41\4"+
    "\11\5\2\4\4\0\1\4\5\0\26\4\4\5\1\4\11\5\1\4"+
    "\3\5\1\4\5\5\22\0\31\4\3\5\244\0\4\5\66\4\3\5"+
    "\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0\7\4"+
    "\1\0\7\4\1\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0"+
    "\3\4\2\5\2\0\12\5\4\4\7\0\1\4\5\0\3\5\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0"+
    "\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5\3\4"+
    "\1\5\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0"+
    "\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5"+
    "\1\0\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4"+
    "\2\5\2\0\12\5\1\0\1\4\20\0\1\5\1\4\1\0\6\4"+
    "\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4"+
    "\3\0\2\4\3\0\3\4\3\0\14\4\4\0\5\5\3\0\3\5"+
    "\1\0\4\5\2\0\1\4\6\0\1\5\16\0\12\5\11\0\1\4"+
    "\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5\7\0"+
    "\2\5\1\0\2\4\6\0\2\4\2\5\2\0\12\5\22\0\2\5"+
    "\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4"+
    "\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\7\0\1\4\1\0\2\4\2\5\2\0\12\5\1\0\2\4\17\0"+
    "\2\5\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\5"+
    "\1\0\3\5\1\0\4\5\1\4\10\0\1\5\10\0\2\4\2\5"+
    "\2\0\12\5\12\0\6\4\2\0\2\5\1\0\22\4\3\0\30\4"+
    "\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5"+
    "\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4"+
    "\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4"+
    "\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4"+
    "\1\0\6\5\2\0\12\5\2\0\2\4\42\0\1\4\27\0\2\5"+
    "\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\10\4\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0"+
    "\44\5\11\0\1\5\71\0\53\4\24\5\1\4\12\5\6\0\6\4"+
    "\4\5\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4"+
    "\14\5\1\4\17\5\2\0\46\4\12\0\53\4\1\0\1\4\3\0"+
    "\u0149\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0"+
    "\103\4\2\0\3\5\40\0\20\4\20\0\125\4\14\0\u026c\4\2\0"+
    "\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0"+
    "\4\4\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4"+
    "\1\0\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0"+
    "\2\4\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4"+
    "\10\0\51\4\1\5\1\4\5\0\106\4\12\0\35\4\3\0\14\5"+
    "\4\0\14\5\12\0\12\5\36\4\2\0\5\4\13\0\54\4\4\0"+
    "\21\5\7\4\2\5\6\0\12\5\46\0\27\4\5\5\4\0\65\4"+
    "\12\5\1\0\35\5\2\0\13\5\6\0\12\5\15\0\1\4\130\0"+
    "\5\5\57\4\21\5\7\4\4\0\12\5\21\0\11\5\14\0\3\5"+
    "\36\4\12\5\3\0\2\4\12\5\6\0\46\4\16\5\14\0\44\4"+
    "\24\5\10\0\12\5\3\0\3\4\12\5\44\4\122\0\3\5\1\0"+
    "\25\5\4\4\1\5\4\4\1\5\15\0\300\4\47\5\25\0\4\5"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\5\32\0"+
    "\5\5\20\0\2\4\23\0\1\4\13\0\5\5\5\0\6\5\1\0"+
    "\1\4\15\0\1\4\20\0\15\4\3\0\32\4\26\0\15\5\4\0"+
    "\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\21\0"+
    "\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\5"+
    "\16\0\46\4\12\0\66\4\11\0\1\4\17\0\1\5\27\4\11\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\40\5\57\0\1\4\u01d5\0"+
    "\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4"+
    "\2\0\2\5\2\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4"+
    "\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cc\4"+
    "\64\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4"+
    "\24\0\57\4\1\5\14\0\2\5\1\0\31\4\10\0\120\4\2\5"+
    "\45\0\11\4\2\0\147\4\2\0\4\4\1\0\2\4\16\0\12\4"+
    "\120\0\10\4\1\5\3\4\1\5\4\4\1\5\27\4\5\5\20\0"+
    "\1\4\7\0\64\4\14\0\2\5\62\4\21\5\13\0\12\5\6\0"+
    "\22\5\6\4\3\0\1\4\4\0\12\5\34\4\10\5\2\0\27\4"+
    "\15\5\14\0\35\4\3\0\4\5\57\4\16\5\16\0\1\4\12\5"+
    "\46\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5\2\0\12\5"+
    "\6\0\27\4\3\0\1\4\1\5\4\0\60\4\1\5\1\4\3\5"+
    "\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4\43\0"+
    "\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4\221\0"+
    "\43\4\10\5\1\0\2\5\2\0\12\5\6\0\u2ba4\4\14\0\27\4"+
    "\4\0\61\4\u2104\0\u012e\4\2\0\76\4\2\0\152\4\46\0\7\4"+
    "\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"+
    "\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\7\5"+
    "\14\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4"+
    "\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4"+
    "\1\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    67,   134,   201,   268,   335,   268,   402,   469,   268, 
      536,   603,   670,   737,   804,   871,   938,  1005,  1072,  1139, 
     1206,  1273,  1340,  1407,  1474,  1541,  1608,  1675,  1742,  1809, 
     1876,  1943,  2010,  2077,  2144,  2211,  2278,   268,   268,  2345, 
     2412,  2479,   268,   268,   268,   268,  2546,  2613,  2680,  2747, 
     2814,  2881,  2948,   871,  3015,  3082,  3149,  3216,  3283,  3350, 
     3417,  3484,  3551,   268,  3618,  3685,  3752,  3819,  3886,   268, 
     3953,   268,  4020,  4087,  4154,  4221,   268,   536,  4288,  4355, 
     4422,  4489,  4556,  4623,  4690,  4757,   536,  4824,  4891,  4958, 
      268,   268,   268,  5025,  5092,  5159,  5226,  5293,   603,  5360, 
     5427,  5494,  5561,  5628,  5695,  5762,  5829,  5896,  1005,  5963, 
     6030,  6097,  6164,  6231,   268,  6298,  6365,  6432,  6499,  6566, 
     6633,   536,  6700,  6767,  6834,  6901,  6968,  7035,  7102,  7169, 
     7236,  7303,  7370,  7437,  7504,  7571,  7638,  7705,  7772,  7839, 
      268,  7906,  7973,  8040,  8107,  8174,   268,  8241,  8308,  8375, 
     8442,  8509,  8576,   268,   536,  8643,  8710,  8777,  8844,  8911, 
      536,  8978,  9045,  9112,  9179,  9246,   536,  9313,  9380,  9447, 
     9514,  9581,  9648,  9715,  9782,  9849,  9916,  9983, 10050, 10117, 
      536, 10184, 10251, 10318,   268, 10385,   268, 10452, 10519, 10586, 
    10653,   536, 10720, 10787,   536, 10854, 10921, 10988,   536, 11055, 
    11122, 11189, 11256, 11323, 11390, 11457, 11524, 11591, 11658,   268, 
    11725,   536, 11792, 11859, 11926, 11993,   536, 12060, 12127, 12194, 
    12261, 12328, 12395, 12462, 12529, 12596, 12663, 12730,   268,   536, 
    12797, 12864, 12931, 12998,   536, 13065,   536, 13132, 13199, 13266, 
    13333, 13400, 13467,   603, 13534,   536,   536,   536,   536, 13601, 
    13668, 13735, 13802, 13869, 13936,   268, 14003, 14070, 14137, 14204, 
    14271, 14338, 14405, 14472,   268, 14539, 14606, 14673, 14740, 14807, 
    14874, 14941, 15008, 15075, 15142, 15209, 15276, 15343, 15410,   268, 
    15477, 15544, 15611, 15678, 15745,   268, 15812, 15879, 15946, 16013, 
    16080, 16147, 16214, 16281, 16348, 16415, 16482, 16549, 16616, 16683, 
    16750, 16817, 16884, 16951, 17018, 17085, 17152, 17219, 17286, 17353, 
    17420,   268, 17487, 17554,   268, 17621,   268,   268
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\1\7\14\5\1\10\63\5\1\0\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\0\1\23\1\0\1\24\1\25\2\13\1\26"+
    "\1\13\1\27\1\30\1\13\1\0\1\31\1\32\1\33"+
    "\1\13\1\34\1\31\1\13\1\35\1\36\1\13\1\37"+
    "\1\13\1\40\1\41\3\16\1\42\1\43\1\13\1\44"+
    "\2\13\1\37\1\43\1\45\1\13\1\46\1\47\1\50"+
    "\1\51\1\52\1\45\1\27\3\13\1\53\1\54\1\55"+
    "\1\56\1\13\17\3\1\57\63\3\17\60\1\61\63\60"+
    "\105\0\1\7\120\0\1\62\1\63\34\0\1\63\26\0"+
    "\1\12\104\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\31\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\14\2\0\1\14\2\0\1\23"+
    "\3\0\7\14\1\0\1\14\1\0\31\14\5\0\5\14"+
    "\4\0\1\14\4\0\3\14\1\65\1\0\1\66\1\67"+
    "\2\0\1\23\3\0\7\14\1\0\1\14\1\0\5\14"+
    "\1\67\5\14\4\65\12\14\5\0\5\14\4\0\1\14"+
    "\4\0\2\14\2\70\1\0\1\66\1\67\2\0\1\71"+
    "\3\0\7\14\1\0\1\14\1\0\5\14\1\67\5\14"+
    "\4\70\12\14\5\0\5\14\4\0\1\14\6\0\1\72"+
    "\1\73\36\0\4\73\37\0\1\74\1\75\1\76\35\0"+
    "\4\75\35\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\31\13\5\0\1\77"+
    "\4\13\4\0\1\13\13\22\1\100\1\101\66\22\4\0"+
    "\1\13\3\14\2\0\1\13\2\0\1\23\3\0\7\13"+
    "\1\0\1\13\1\0\13\13\4\14\12\13\5\0\5\13"+
    "\4\0\1\13\15\0\1\102\7\0\1\103\1\104\16\0"+
    "\1\105\20\0\1\106\3\0\1\103\7\0\1\107\66\0"+
    "\1\110\20\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\1\111\30\13\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\112\1\0\31\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\5\13\1\113\23\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\5\13\1\114\23\13\5\0\5\13"+
    "\4\0\1\13\66\0\1\115\20\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\2\13\1\116\26\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\6\13"+
    "\1\117\1\0\1\13\1\0\31\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\22\13\1\120\4\13"+
    "\1\121\1\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\21\13\1\122\7\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\123\1\0\31\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\5\13\1\124"+
    "\23\13\5\0\5\13\4\0\1\13\4\0\2\14\1\16"+
    "\1\70\1\0\1\66\1\67\2\0\1\71\3\0\7\14"+
    "\1\0\1\14\1\0\5\14\1\67\5\14\1\16\1\70"+
    "\1\16\1\70\12\14\5\0\5\14\4\0\1\14\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\6\13\1\125\1\13\1\126\7\13"+
    "\1\127\10\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\7\13\1\130\21\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\17\13\1\131\11\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\5\13\1\132\23\13\5\0\5\13\4\0\1\13\66\0"+
    "\1\133\103\0\1\134\103\0\1\135\12\0\17\3\1\57"+
    "\1\136\62\3\17\60\1\137\102\60\1\137\1\140\62\60"+
    "\10\0\1\141\114\0\1\142\17\0\1\142\44\0\4\64"+
    "\2\0\1\64\3\0\1\64\2\0\7\64\1\0\1\64"+
    "\1\0\31\64\5\0\5\64\4\0\1\64\4\0\4\14"+
    "\2\0\1\14\2\0\1\71\3\0\7\14\1\0\1\14"+
    "\1\0\31\14\5\0\5\14\4\0\1\14\4\0\2\14"+
    "\1\143\1\144\1\145\1\0\1\14\2\0\1\23\3\0"+
    "\7\14\1\0\1\14\1\0\13\14\4\144\12\14\5\0"+
    "\5\14\4\0\1\14\4\0\2\14\2\70\1\0\1\66"+
    "\1\67\2\0\1\23\3\0\7\14\1\0\1\14\1\0"+
    "\5\14\1\67\5\14\4\70\12\14\5\0\5\14\4\0"+
    "\1\14\4\0\1\13\1\14\1\146\1\147\2\0\1\13"+
    "\2\0\1\23\3\0\7\13\1\0\1\13\1\0\13\13"+
    "\1\150\1\147\1\150\1\151\12\13\5\0\5\13\4\0"+
    "\1\13\11\0\1\66\1\152\25\0\1\152\50\0\2\73"+
    "\1\0\1\66\1\152\25\0\1\152\5\0\4\73\37\0"+
    "\1\74\1\75\1\76\1\0\1\152\25\0\1\152\5\0"+
    "\4\75\37\0\2\75\2\0\1\152\25\0\1\152\5\0"+
    "\4\75\37\0\1\153\1\75\36\0\4\75\35\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\31\13\5\0\1\13\1\154\3\13\4\0"+
    "\1\13\13\22\1\155\1\101\66\22\21\0\1\156\3\0"+
    "\1\157\1\160\16\0\1\161\10\0\1\156\13\0\1\157"+
    "\7\0\1\162\32\0\1\163\75\0\1\164\147\0\1\165"+
    "\41\0\1\166\4\0\1\166\50\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\31\13\5\0\3\13\1\167\1\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\21\13\1\170\7\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\6\13\1\171"+
    "\1\13\1\172\20\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\23\13\1\173\5\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\25\13\1\174"+
    "\3\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\5\13\1\175\1\13"+
    "\1\0\1\13\1\0\31\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\4\13\1\176\2\13\1\0\1\13\1\0\31\13\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\13\1\0\10\13"+
    "\1\177\20\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\7\13\1\200\14\13\1\201\4\13\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\13\1\0\6\13"+
    "\1\171\22\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\22\13\1\202\1\203\5\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\5\13\1\204"+
    "\23\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\22\13\1\205\6\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\31\13\5\0\4\13\1\206"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\5\13\1\207\1\13\1\0\1\13\1\0"+
    "\31\13\5\0\5\13\4\0\1\13\10\3\1\210\6\3"+
    "\1\57\63\3\17\60\1\137\1\211\72\60\1\212\6\60"+
    "\1\137\63\60\10\0\1\213\115\0\1\214\31\0\1\214"+
    "\31\0\2\14\2\144\2\0\1\14\2\0\1\23\3\0"+
    "\7\14\1\0\1\14\1\0\13\14\4\144\12\14\5\0"+
    "\5\14\4\0\1\14\6\0\1\215\1\216\1\217\35\0"+
    "\4\216\35\0\3\14\1\147\2\0\1\14\2\0\1\23"+
    "\3\0\7\14\1\0\1\14\1\0\13\14\4\147\12\14"+
    "\5\0\5\14\4\0\1\14\4\0\4\14\2\0\1\14"+
    "\2\0\1\220\3\0\7\14\1\0\1\14\1\0\31\14"+
    "\5\0\5\14\4\0\1\14\4\0\2\14\2\147\2\0"+
    "\1\14\2\0\1\220\3\0\7\14\1\0\1\14\1\0"+
    "\13\14\4\147\12\14\5\0\5\14\4\0\1\14\4\0"+
    "\2\14\1\147\1\14\2\0\1\14\2\0\1\220\3\0"+
    "\7\14\1\0\1\14\1\0\13\14\1\147\15\14\5\0"+
    "\5\14\4\0\1\14\6\0\1\215\1\216\1\145\35\0"+
    "\4\216\43\0\1\152\25\0\1\152\46\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\25\13\1\221\3\13\5\0\5\13\4\0\1\13"+
    "\22\0\1\222\17\0\1\222\72\0\1\223\75\0\1\224"+
    "\147\0\1\225\41\0\1\226\4\0\1\226\106\0\1\227"+
    "\62\0\1\230\75\0\1\231\14\0\1\232\54\0\4\13"+
    "\2\0\1\233\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\31\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\11\13\1\234\17\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\11\13\1\235"+
    "\17\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\5\13\1\236\23\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\237\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\1\240\30\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\5\13\1\241"+
    "\23\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\10\13\1\242\20\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\5\13\1\243\11\13\1\244"+
    "\11\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\6\13\1\245\2\13\1\246\17\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\5\13\1\247"+
    "\23\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\17\13\1\250\11\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\22\13\1\251\6\13\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\252\1\0\31\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\5\13\1\253\1\13\1\0"+
    "\1\13\1\0\31\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\5\13\1\233\23\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\5\13\1\254\1\13\1\0\1\13\1\0"+
    "\31\13\5\0\5\13\4\0\1\13\10\3\1\255\6\3"+
    "\1\57\63\3\10\60\1\256\6\60\1\137\73\60\1\257"+
    "\6\60\1\137\63\60\21\0\1\63\11\0\1\260\3\0"+
    "\1\261\12\0\1\260\3\0\1\63\50\0\1\262\46\0"+
    "\1\262\15\0\2\216\36\0\4\216\37\0\1\215\1\216"+
    "\36\0\4\216\35\0\1\13\3\14\2\0\1\13\2\0"+
    "\1\23\3\0\7\13\1\0\1\13\1\0\13\13\1\263"+
    "\1\14\1\264\1\14\12\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\31\13\5\0\2\13\1\265"+
    "\2\13\4\0\1\13\23\0\1\266\31\0\1\266\67\0"+
    "\1\267\62\0\1\270\112\0\1\271\111\0\1\272\76\0"+
    "\1\272\77\0\1\273\54\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\13\1\0\24\13"+
    "\1\274\4\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\5\13\1\275\23\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\17\13\1\276\11\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\31\13\5\0\1\277\4\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\2\13\1\300\26\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\3\13\1\265\3\13\1\0\1\13\1\0\31\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\27\13\1\301\1\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\6\13\1\300\22\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\5\13\1\302\1\13\1\0\1\13\1\0"+
    "\31\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\5\13\1\303\23\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\6\13\1\304\22\13\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\13\1\0\24\13"+
    "\1\305\4\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\7\13\1\306\21\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\5\13\1\307\23\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\7\13\1\310\21\13\5\0\5\13\4\0\1\13\15\3"+
    "\1\311\1\3\1\57\63\3\10\60\1\312\6\60\1\137"+
    "\102\60\1\137\17\60\1\313\43\60\34\0\1\314\2\0"+
    "\1\314\103\0\1\315\67\0\1\316\44\0\1\316\14\0"+
    "\4\14\2\0\1\14\2\0\1\23\3\0\7\14\1\0"+
    "\1\14\1\0\14\14\1\317\14\14\5\0\5\14\4\0"+
    "\1\14\4\0\2\14\1\317\1\14\2\0\1\14\2\0"+
    "\1\23\3\0\7\14\1\0\1\14\1\0\31\14\5\0"+
    "\5\14\4\0\1\14\24\0\1\320\46\0\1\320\50\0"+
    "\1\321\76\0\1\321\77\0\1\322\54\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\23\13\1\323\5\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\324\1\0\31\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\30\13\1\325\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\13\1\0\31\13"+
    "\5\0\1\13\1\326\3\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\4\13\1\327"+
    "\2\13\1\0\1\13\1\0\31\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\20\13\1\330\10\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\5\13\1\331\23\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\11\13\1\332\17\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\10\13\1\333"+
    "\20\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\4\13\1\334\24\13\5\0\5\13\4\0\1\13"+
    "\17\3\1\57\13\3\1\335\16\3\1\335\30\3\17\60"+
    "\1\137\17\60\1\336\62\60\1\137\20\60\1\337\42\60"+
    "\35\0\1\340\3\0\1\340\102\0\1\341\67\0\1\342"+
    "\16\0\1\342\41\0\2\14\2\343\2\0\1\14\2\0"+
    "\1\23\3\0\7\14\1\0\1\14\1\0\13\14\4\343"+
    "\12\14\5\0\5\14\4\0\1\14\25\0\1\344\44\0"+
    "\1\344\42\0\1\345\54\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\13\1\0\10\13"+
    "\1\346\20\13\5\0\5\13\4\0\1\13\4\0\4\13"+
    "\2\0\1\13\2\0\1\23\1\64\2\0\7\13\1\0"+
    "\1\13\1\0\5\13\1\347\23\13\5\0\5\13\4\0"+
    "\1\13\4\0\4\13\2\0\1\13\2\0\1\23\1\64"+
    "\2\0\7\13\1\0\1\13\1\0\25\13\1\350\3\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\13\1\0"+
    "\10\13\1\351\20\13\5\0\5\13\4\0\1\13\4\0"+
    "\4\13\2\0\1\13\2\0\1\23\1\64\2\0\7\13"+
    "\1\0\1\13\1\0\5\13\1\352\23\13\5\0\5\13"+
    "\4\0\1\13\4\0\4\13\2\0\1\13\2\0\1\23"+
    "\1\64\2\0\7\13\1\0\1\13\1\0\5\13\1\353"+
    "\23\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\21\13\1\354\7\13\5\0\5\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\7\13\1\0\1\13\1\0\5\13\1\355\23\13\5\0"+
    "\5\13\4\0\1\13\17\3\1\57\14\3\1\356\2\3"+
    "\1\356\43\3\17\60\1\137\20\60\1\357\61\60\1\137"+
    "\21\60\1\360\41\60\27\0\1\361\24\0\1\361\66\0"+
    "\1\362\71\0\1\363\24\0\1\363\32\0\2\14\2\364"+
    "\2\0\1\14\2\0\1\23\3\0\7\14\1\0\1\14"+
    "\1\0\13\14\4\364\12\14\5\0\5\14\4\0\1\14"+
    "\26\0\1\365\16\0\1\365\41\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\366\1\0"+
    "\31\13\5\0\5\13\4\0\1\13\4\0\4\13\2\0"+
    "\1\13\2\0\1\23\1\64\2\0\7\13\1\0\1\13"+
    "\1\0\31\13\5\0\2\13\1\367\2\13\4\0\1\13"+
    "\4\0\4\13\2\0\1\13\2\0\1\23\1\64\2\0"+
    "\3\13\1\367\3\13\1\0\1\13\1\0\31\13\5\0"+
    "\5\13\4\0\1\13\4\0\4\13\2\0\1\13\2\0"+
    "\1\23\1\64\2\0\7\13\1\0\1\370\1\0\31\13"+
    "\5\0\5\13\4\0\1\13\4\0\4\13\2\0\1\13"+
    "\2\0\1\23\1\64\2\0\7\13\1\0\1\371\1\0"+
    "\31\13\5\0\5\13\4\0\1\13\17\3\1\57\15\3"+
    "\1\372\3\3\1\372\41\3\17\60\1\137\21\60\1\373"+
    "\60\60\1\137\20\60\1\374\42\60\31\0\1\375\4\0"+
    "\1\375\75\0\1\376\101\0\1\377\1\0\1\u0100\77\0"+
    "\1\u0101\24\0\1\u0101\26\0\17\3\1\57\7\3\1\u0102"+
    "\24\3\1\u0102\26\3\17\60\1\137\20\60\1\u0103\61\60"+
    "\1\137\11\60\1\u0104\51\60\12\0\1\u0105\25\0\1\u0105"+
    "\104\0\1\u0106\71\0\1\u0107\61\0\1\u0108\21\0\1\u0109"+
    "\50\0\17\3\1\57\11\3\1\u010a\4\3\1\u010a\44\3"+
    "\17\60\1\137\11\60\1\u010b\70\60\1\137\22\60\1\u010c"+
    "\40\60\10\0\1\u010d\135\0\1\u010e\71\0\1\u0100\60\0"+
    "\1\u010f\72\0\12\3\1\u0110\4\3\1\57\20\3\1\u0110"+
    "\42\3\17\60\1\137\22\60\1\u0111\57\60\1\137\23\60"+
    "\1\u0112\37\60\10\0\1\u0113\132\0\1\u0114\74\0\1\u0109"+
    "\50\0\10\3\1\u0115\6\3\1\57\63\3\17\60\1\137"+
    "\23\60\1\u0116\56\60\1\137\20\60\1\u0117\42\60\32\0"+
    "\1\u0118\114\0\1\u0119\36\0\10\3\1\u011a\6\3\1\57"+
    "\63\3\17\60\1\137\20\60\1\u011b\61\60\1\137\24\60"+
    "\1\u011c\36\60\45\0\1\u011d\35\0\17\3\1\57\12\3"+
    "\1\u011e\50\3\17\60\1\137\24\60\1\u011f\50\60\1\u0120"+
    "\4\60\1\137\25\60\1\u0121\35\60\43\0\1\u0122\37\0"+
    "\12\60\1\u0123\4\60\1\137\25\60\1\u0124\54\60\1\137"+
    "\21\60\1\u0125\60\60\1\137\23\60\1\u0126\37\60\42\0"+
    "\1\u0127\40\0\17\60\1\137\21\60\1\u0128\60\60\1\137"+
    "\23\60\1\u0129\56\60\1\137\24\60\1\u012a\55\60\1\137"+
    "\22\60\1\u012b\40\60\31\0\1\u012c\51\0\17\60\1\137"+
    "\24\60\1\u012d\55\60\1\137\22\60\1\u012e\50\60\1\u012f"+
    "\6\60\1\137\102\60\1\137\11\60\1\u0130\51\60\43\0"+
    "\1\u0131\37\0\10\60\1\u0132\6\60\1\137\102\60\1\137"+
    "\11\60\1\u0133\61\60\1\u0134\6\60\1\137\102\60\1\137"+
    "\23\60\1\u0135\37\60\10\0\1\u0136\72\0\10\60\1\u0137"+
    "\6\60\1\137\102\60\1\137\23\60\1\u012d\56\60\1\137"+
    "\12\60\1\u0138\60\60\1\u0139\6\60\1\137\63\60\10\0"+
    "\1\u013a\72\0\17\60\1\137\12\60\1\u013b\60\60\1\u013c"+
    "\6\60\1\137\63\60\32\0\1\u013d\50\0\17\60\1\137"+
    "\12\60\1\u013e\50\60";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  9,  1,  1,  9,  1,  0,  1,  1,  0,  1, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  1,  1,  0,  9,  9,  9,  9,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  1,  0,  1,  1,  1,  1,  0,  1,  9, 
     0,  0,  0,  0,  0,  9,  0,  9,  1,  1,  1,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  0,  0,  0, 
     0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  9,  1,  0,  0, 
     1,  0,  9,  0,  0,  0,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  9,  0,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  0,  1,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[17688];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2258) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException, java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();  FormatterParser.addLine(null);
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
//.out.println("yy_action == " + yy_action);
      switch (yy_action) {

        case 228: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("</span>");  }
        case 319: break;
        case 255: 
          {  
                                              boolean regenerate = yytext().contains(":r");
                                              if (regenerate) FormatterParser.addOriginalLine("<!--generatedStart-->");
                                              FormatterParser.startCalypsoLevel();
                                              FormatterParser.start(yytext()); 
                                              yybegin(CALYPSO); 
                                              return symbol( regenerate ? sym.START_REGEN : sym.START);
                                           }
        case 320: break;
        case 209: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("<span>");  }
        case 321: break;
        case 186: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("<br/>");  }
        case 322: break;
        case 40: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.KEYWORD_DELIM);  }
        case 323: break;
        case 114: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("<p>");  }
        case 324: break;
        case 146: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("</p>");  }
        case 325: break;
        case 153: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("<br>");  }
        case 326: break;
        case 184: 
          {  FormatterParser.echoCalypso(yytext()); FormatterParser.addLine("</br>");  }
        case 327: break;
        case 5: 
        case 6: 
          { 
  						FormatterParser.addLine("\n");
  					   }
        case 328: break;
        case 63: 
        case 108: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.STRING, yytext().substring(1, yytext().length()-1));  }
        case 329: break;
        case 216: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.INLINE);  }
        case 330: break;
        case 211: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.SENDER);  }
        case 331: break;
        case 198: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.FALSE);  }
        case 332: break;
        case 194: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.TRADE);  }
        case 333: break;
        case 191: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.NOTIN);  }
        case 334: break;
        case 45: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.SEMIC);  }
        case 335: break;
        case 44: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.RBLOCK);  }
        case 336: break;
        case 43: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.LBLOCK);  }
        case 337: break;
        case 42: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.COMMA);  }
        case 338: break;
        case 38: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.RPAREN);  }
        case 339: break;
        case 37: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.LPAREN);  }
        case 340: break;
        case 15: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.PERIOD);  }
        case 341: break;
        case 180: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.EMPTY);  }
        case 342: break;
        case 248: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.ITERATOR);  }
        case 343: break;
        case 247: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.TRANSFER);  }
        case 344: break;
        case 246: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.NOTEMPTY);  }
        case 345: break;
        case 245: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.RECEIVER);  }
        case 346: break;
        case 236: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.MESSAGE);  }
        case 347: break;
        case 234: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.INCLUDE);  }
        case 348: break;
        case 229: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.PRODUCT);  }
        case 349: break;
        case 39: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.EQ);  }
        case 350: break;
        case 25: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.GT);  }
        case 351: break;
        case 19: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.LT);  }
        case 352: break;
        case 77: 
        case 84: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.IN);  }
        case 353: break;
        case 86: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.IF);  }
        case 354: break;
        case 91: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.OR);  }
        case 355: break;
        case 4: 
        case 7: 
          {  
                                              FormatterParser.addLine(yytext());
                                           }
        case 356: break;
        case 10: 
        case 16: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 51: 
        case 62: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 85: 
        case 87: 
        case 88: 
        case 89: 
        case 107: 
        case 118: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 144: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 192: 
        case 193: 
        case 195: 
        case 196: 
        case 197: 
        case 199: 
        case 210: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 217: 
        case 218: 
        case 219: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 235: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.IDENTIFIER, yytext());  }
        case 357: break;
        case 12: 
        case 13: 
        case 32: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 98: 
        case 99: 
        case 106: 
        case 140: 
        case 141: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.NUMBER, new Double(yytext()));  }
        case 358: break;
        case 8: 
        case 9: 
          {  FormatterParser.echoCalypso(yytext());  }
        case 359: break;
        case 316: 
          { 
  					      
                                              yybegin(GENERATED);
                                              FormatterParser.startGenerated();
  					   }
        case 360: break;
        case 311: 
          { 
                                              boolean end = FormatterParser.endGenerated();
                                              if (end) yybegin(YYINITIAL); 
                                           }
        case 361: break;
        case 264: 
          { 
                                              yybegin(YYINITIAL); 
                                              FormatterParser.endCalypsoLevel();
                                              return symbol(sym.END);
                                              
                                           }
        case 362: break;
        case 243: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.DATE);  }
        case 363: break;
        case 20: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.NOT);  }
        case 364: break;
        case 69: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.LTE);  }
        case 365: break;
        case 71: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.NEQ);  }
        case 366: break;
        case 76: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.GTE);  }
        case 367: break;
        case 90: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.EQEQ);  }
        case 368: break;
        case 92: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.AND);  }
        case 369: break;
        case 121: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.SET);  }
        case 370: break;
        case 154: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.LIKE);  }
        case 371: break;
        case 160: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.ELSE);  }
        case 372: break;
        case 166: 
          {  FormatterParser.echoCalypso(yytext()); return symbol(sym.TRUE);  }
        case 373: break;
        case 317: 
          { 
                                              FormatterParser.startGenerated();
                                           }
        case 374: break;
        case 279: 
          { 
  					      yybegin(IGNORE);
  					   }
        case 375: break;
        case 314: 
          { 
                                              String s = yytext();
                                              int endIndex = s.lastIndexOf("<!--");
                                              boolean isStart = s.endsWith("<!--generatedStart-->");
                                              FormatterParser.collectGenerated(s.substring(0, endIndex));
                                              
                                              boolean end = isStart ? false : FormatterParser.endGenerated();
                                              
                                              if (end) yybegin(YYINITIAL);
                                           }
        case 376: break;
        case 285: 
          { 
                                              yybegin(YYINITIAL); 
                                           }
        case 377: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {   return null;
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
