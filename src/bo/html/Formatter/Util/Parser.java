
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Apr 12 11:48:35 IST 2014
//----------------------------------------------------

package bo.html.Formatter.Util;

import java.util.*;
import java_cup.runtime.*;

import util.commonUTIL;

/** CUP v0.10k generated parser.
  * @version Sat Apr 12 11:48:35 IST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\003\004\000\002\002\004\000\002\003" +
    "\002\000\002\033\002\000\002\004\006\000\002\034\002" +
    "\000\002\004\006\000\002\005\003\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\035\002" +
    "\000\002\010\006\000\002\011\005\000\002\012\005\000" +
    "\002\013\007\000\002\036\002\000\002\016\010\000\002" +
    "\014\005\000\002\037\002\000\002\015\010\000\002\022" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\025" +
    "\006\000\002\026\004\000\002\030\005\000\002\017\005" +
    "\000\002\017\004\000\002\020\005\000\002\020\003\000" +
    "\002\032\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\010\002\uffff\004\007\005\004\001\002\000" +
    "\020\003\023\016\015\040\017\041\020\042\024\043\021" +
    "\044\014\001\002\000\010\002\uffff\004\007\005\004\001" +
    "\002\000\004\002\202\001\002\000\020\003\023\016\015" +
    "\040\017\041\020\042\024\043\021\044\014\001\002\000" +
    "\024\003\ufff7\006\ufff7\016\ufff7\017\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\001\002\000\026\003\ufff2\006" +
    "\ufff2\016\ufff2\017\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\001\002\000\026\003\ufff0\006\ufff0\016" +
    "\ufff0\017\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\001\002\000\024\003\ufff8\006\ufff8\016\ufff8\017" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002" +
    "\000\004\054\176\001\002\000\020\003\uffef\016\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\001\002\000\024" +
    "\003\ufff5\006\ufff5\016\ufff5\017\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\001\002\000\004\014\047\001\002" +
    "\000\004\014\041\001\002\000\004\056\037\001\002\000" +
    "\024\003\023\006\ufffa\016\015\017\ufffa\040\017\041\020" +
    "\042\024\043\021\044\014\001\002\000\004\034\035\001" +
    "\002\000\004\056\033\001\002\000\026\003\ufff1\006\ufff1" +
    "\016\ufff1\017\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\001\002\000\004\006\ufffe\001\002\000\026" +
    "\003\ufff3\006\ufff3\016\ufff3\017\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\001\002\000\024\003\ufff6" +
    "\006\ufff6\016\ufff6\017\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\001\002\000\004\006\032\001\002\000\010" +
    "\002\ufffd\004\ufffd\005\ufffd\001\002\000\004\034\034\001" +
    "\002\000\026\003\uffed\006\uffed\016\uffed\017\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\001\002\000" +
    "\024\003\ufff4\006\ufff4\016\ufff4\017\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\001\002\000\006\006\ufff9\017" +
    "\ufff9\001\002\000\004\034\040\001\002\000\026\003\uffec" +
    "\006\uffec\016\uffec\017\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\001\002\000\004\056\042\001\002" +
    "\000\004\015\043\001\002\000\020\003\uffea\016\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\001\002\000\020" +
    "\003\023\016\015\040\017\041\020\042\024\043\021\044" +
    "\014\001\002\000\024\003\uffe9\006\uffe9\016\uffe9\017\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002\000" +
    "\020\003\023\016\015\040\017\041\020\042\024\043\021" +
    "\044\014\001\002\000\044\011\054\012\060\013\067\014" +
    "\062\032\077\033\050\037\071\046\066\047\075\050\051" +
    "\051\052\052\065\053\056\054\055\055\064\056\063\057" +
    "\053\001\002\000\034\012\060\013\067\037\071\046\066" +
    "\047\075\050\051\051\052\052\065\053\056\054\055\055" +
    "\064\056\063\057\053\001\002\000\004\035\162\001\002" +
    "\000\004\035\157\001\002\000\042\007\uffc1\010\uffc1\015" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036" +
    "\uffc1\001\002\000\044\011\054\012\060\013\067\014\062" +
    "\032\077\033\050\037\071\046\066\047\075\050\051\051" +
    "\052\052\065\053\056\054\055\055\064\056\063\057\053" +
    "\001\002\000\004\014\117\001\002\000\004\035\152\001" +
    "\002\000\040\007\uffd9\010\uffd9\015\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002\000\042\007\uffc0" +
    "\010\uffc0\015\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\036\uffc0\001\002\000\040\007\uffd8\010\uffd8\015" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\001" +
    "\002\000\044\011\054\012\060\013\067\014\062\032\077" +
    "\033\050\037\071\046\066\047\075\050\051\051\052\052" +
    "\065\053\056\054\055\055\064\056\063\057\053\001\002" +
    "\000\042\007\uffc3\010\uffc3\015\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\036\uffc3\001\002\000\042\007" +
    "\uffc2\010\uffc2\015\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\036\uffc2\001\002\000\004\035\145\001\002" +
    "\000\004\035\142\001\002\000\042\007\uffbf\010\uffbf\015" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\036" +
    "\uffbf\001\002\000\040\007\uffdb\010\uffdb\015\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\001\002\000\004" +
    "\054\140\001\002\000\040\007\uffd7\010\uffd7\015\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\001\002\000" +
    "\010\007\134\010\135\015\133\001\002\000\040\007\uffda" +
    "\010\uffda\015\uffda\020\uffda\021\uffda\022\uffda\023\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\001\002\000\004\035\130\001\002\000\030\020" +
    "\113\021\110\022\106\023\105\025\102\026\107\027\114" +
    "\030\104\031\101\032\103\033\111\001\002\000\034\012" +
    "\060\013\067\037\071\046\066\047\075\050\051\051\052" +
    "\052\065\053\056\054\055\055\064\056\063\057\053\001" +
    "\002\000\010\007\uffdd\010\uffdd\015\uffdd\001\002\000\004" +
    "\014\117\001\002\000\034\012\uffba\013\uffba\037\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\001\002\000\034\012\uffb7\013" +
    "\uffb7\037\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000" +
    "\004\014\117\001\002\000\034\012\uffbb\013\uffbb\037\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000\034\012\uffbc" +
    "\013\uffbc\037\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002" +
    "\000\034\012\uffb9\013\uffb9\037\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\001\002\000\034\012\uffbd\013\uffbd\037\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\001\002\000\034\012\uffb6\013" +
    "\uffb6\037\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\001\002\000" +
    "\034\012\060\013\067\037\071\046\066\047\075\050\051" +
    "\051\052\052\065\053\056\054\055\055\064\056\063\057" +
    "\053\001\002\000\034\012\uffbe\013\uffbe\037\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\001\002\000\034\012\uffb8\013\uffb8" +
    "\037\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\001\002\000\010" +
    "\007\uffe0\010\uffe0\015\uffe0\001\002\000\010\007\uffdf\010" +
    "\uffdf\015\uffdf\001\002\000\016\012\060\013\067\015\122" +
    "\055\064\056\063\057\053\001\002\000\006\015\uffc4\036" +
    "\uffc4\001\002\000\006\015\125\036\124\001\002\000\040" +
    "\007\uffc7\010\uffc7\015\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\001\002\000\006\015\uffc5\036\uffc5\001" +
    "\002\000\014\012\060\013\067\055\064\056\063\057\053" +
    "\001\002\000\040\007\uffc8\010\uffc8\015\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\001\002\000\006\015" +
    "\uffc6\036\uffc6\001\002\000\010\007\uffde\010\uffde\015\uffde" +
    "\001\002\000\004\054\131\001\002\000\042\007\uffd5\010" +
    "\uffd5\014\117\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\001\002\000\040\007\uffcf\010\uffcf\015\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\001\002" +
    "\000\020\003\uffe5\016\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\001\002\000\044\011\054\012\060\013\067" +
    "\014\062\032\077\033\050\037\071\046\066\047\075\050" +
    "\051\051\052\052\065\053\056\054\055\055\064\056\063" +
    "\057\053\001\002\000\044\011\054\012\060\013\067\014" +
    "\062\032\077\033\050\037\071\046\066\047\075\050\051" +
    "\051\052\052\065\053\056\054\055\055\064\056\063\057" +
    "\053\001\002\000\010\007\uffe3\010\uffe3\015\uffe3\001\002" +
    "\000\010\007\uffe4\010\uffe4\015\uffe4\001\002\000\004\037" +
    "\141\001\002\000\040\007\uffc9\010\uffc9\015\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\001\002\000\004" +
    "\054\143\001\002\000\042\007\uffd6\010\uffd6\014\117\015" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\001" +
    "\002\000\040\007\uffd0\010\uffd0\015\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\001\002\000\004\054\146" +
    "\001\002\000\042\007\uffd3\010\uffd3\014\117\015\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\001\002\000" +
    "\040\007\uffcd\010\uffcd\015\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\001\002\000\010\007\134\010\135" +
    "\015\151\001\002\000\010\007\uffe2\010\uffe2\015\uffe2\001" +
    "\002\000\004\054\153\001\002\000\042\007\uffd2\010\uffd2" +
    "\014\117\015\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\001\002\000\040\007\uffcc\010\uffcc\015\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\001\002\000" +
    "\040\007\uffca\010\uffca\015\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\001\002\000\010\007\134\010\135" +
    "\015\uffe1\001\002\000\004\054\160\001\002\000\042\007" +
    "\uffd1\010\uffd1\014\117\015\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\001\002\000\040\007\uffcb\010\uffcb" +
    "\015\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\001\002\000\004\054\163\001\002\000\042\007\uffd4\010" +
    "\uffd4\014\117\015\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\001\002\000\040\007\uffce\010\uffce\015\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\001\002" +
    "\000\010\007\uffdc\010\uffdc\015\uffdc\001\002\000\026\003" +
    "\ufff5\006\ufff5\016\ufff5\017\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\045\170\001\002\000\024\003\uffe8\006" +
    "\uffe8\016\uffe8\017\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\001\002\000\020\003\uffe7\016\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\001\002\000\020\003\023" +
    "\016\015\040\017\041\020\042\024\043\021\044\014\001" +
    "\002\000\024\003\uffe6\006\uffe6\016\uffe6\017\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002\000\020\003" +
    "\023\016\015\040\017\041\020\042\024\043\021\044\014" +
    "\001\002\000\004\017\175\001\002\000\026\003\uffee\006" +
    "\uffee\016\uffee\017\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\001\002\000\004\024\177\001\002\000" +
    "\034\012\060\013\067\037\071\046\066\047\075\050\051" +
    "\051\052\052\065\053\056\054\055\055\064\056\063\057" +
    "\053\001\002\000\004\034\201\001\002\000\026\003\uffeb" +
    "\006\uffeb\016\uffeb\017\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\006\ufffc\001\002\000" +
    "\004\006\206\001\002\000\010\002\ufffb\004\ufffb\005\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\003\005\004\004\001\001\000\026\005" +
    "\203\006\021\007\015\010\011\011\026\012\010\013\024" +
    "\014\012\015\007\016\027\001\001\000\006\003\202\004" +
    "\004\001\001\000\002\001\001\000\026\005\025\006\021" +
    "\007\015\010\011\011\026\012\010\013\024\014\012\015" +
    "\007\016\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\172\001\001\000\002\001\001\000\004\022\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\035\006\021\007\015\010\011\011\026\012\010\013\024" +
    "\014\012\015\007\016\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\043" +
    "\001\001\000\024\006\044\007\015\010\011\011\026\012" +
    "\010\013\024\014\012\015\007\016\027\001\001\000\002" +
    "\001\001\000\024\006\166\007\165\010\011\011\026\012" +
    "\010\013\024\014\012\015\007\016\027\001\001\000\020" +
    "\021\072\023\075\024\067\025\073\026\056\027\071\030" +
    "\060\001\001\000\016\023\164\024\067\025\073\026\056" +
    "\027\071\030\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\155\023\075\024\067" +
    "\025\073\026\056\027\071\030\060\001\001\000\004\017" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\147\023\075\024" +
    "\067\025\073\026\056\027\071\030\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\111\001\001\000\016\023\077" +
    "\024\067\025\073\026\056\027\071\030\060\001\001\000" +
    "\002\001\001\000\004\017\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\114\024\067\025\073\026" +
    "\056\027\071\030\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\120\027\117\032\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\117\032\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\136" +
    "\023\075\024\067\025\073\026\056\027\071\030\060\001" +
    "\001\000\020\021\135\023\075\024\067\025\073\026\056" +
    "\027\071\030\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\170\001\001\000\024\006\171" +
    "\007\015\010\011\011\026\012\010\013\024\014\012\015" +
    "\007\016\027\001\001\000\002\001\001\000\026\005\173" +
    "\006\021\007\015\010\011\011\026\012\010\013\024\014" +
    "\012\015\007\016\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\177\024\067\025" +
    "\073\026\056\027\071\030\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\204\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    /*
     * This is the place to override methods from lr_parser
     */
  public void unrecovered_syntax_error(Symbol cur_token)
    throws java.lang.Exception
    {
      FormatterParser.error(cur_token.value != null ? cur_token.value.toString()
                                                    : "<Unknown token>", cur_token.left);
    }

  public void syntax_error(Symbol cur_token)
    {
      FormatterParser.error(cur_token.value != null ? cur_token.value.toString()
                                                    : "<Unknown token>", cur_token.left);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
    private ParserContext  _context = new ParserContext();
                
    private static Boolean compare(Object value, int comparator, Object literal)
    {
        try {
            if (value instanceof Boolean || literal instanceof Boolean) {
                if ((value instanceof Boolean == false) || (literal instanceof Boolean == false))
                    return Boolean.FALSE;
                else
                    return Boolean.valueOf((((Boolean)value).equals(literal)));            
            }
        
            Comparable c1 = null, c2 = null;
            /*
             * Convert Int to double so that a comparison can be made
             * with literal (which will always be expressed as a double.
             */
            if (value instanceof Integer)
                value = Double.valueOf( ((Integer)value).doubleValue() );
                
            try {
                c1 = (Comparable)value;
            }
            catch (ClassCastException cce) {
                c1 = value.toString();
            }
            
            c2 = (Comparable)literal;
            int comparison = c1.compareTo(c2);
        
            switch (comparator) {
                case sym.LT:
                    return Boolean.valueOf(comparison < 0);
                case sym.GT:
                    return Boolean.valueOf(comparison > 0);
                case sym.LTE:
                    return Boolean.valueOf(comparison <= 0);
                case sym.GTE:
                    return Boolean.valueOf(comparison >= 0);
                case sym.EQEQ:
                    return Boolean.valueOf(comparison == 0);
                case sym.NEQ:
                    return Boolean.valueOf(comparison != 0);
                case sym.LIKE:
                    String s1 = (String)c1;
                    String s2 = (String)c2;
                    boolean checkStart = true;
                    boolean checkEnd = true;
                    if (s2.startsWith("%")) {
                        s2 = s2.substring(1);
                        checkStart = false;
                    }
                    if (s2.endsWith("%")) {
                        s2 = s2.substring(0, s2.length()-1);
                        checkEnd = false;
                    }
                    if (!checkStart && !checkEnd) {
                        if (s1.indexOf(s2) == -1)
                            return Boolean.FALSE;
                        else
                            return Boolean.TRUE;
                    }
                    if (checkStart) {
                        if (s1.startsWith(s2) == false)
                            return Boolean.FALSE;
                    }
                    if (checkEnd) {
                        if (s1.endsWith(s2) == false)
                            return Boolean.FALSE;
                    }
                    
                    return Boolean.TRUE;
            }
        }
        catch (Exception e) { /** ignore **/ }
        return Boolean.FALSE;
    }

    private static Boolean isIn(Object value, Vector values)
    {
        try {
            return Boolean.valueOf(compare(value, values));
        }
        catch (Exception e) {
          //  Log.error("FormatterParser", e);
        }
        return Boolean.FALSE;
    }

    private static Boolean isNotIn(Object value, Vector values)
    {
	return !isIn(value, values);
    }

    private static Boolean isEmpty(Object value)
    {
        try {
            return Boolean.valueOf(commonUTIL.isEmpty(value.toString()));
        }
        catch (Exception e) {
          //  Log.error("FormatterParser", e);
        }
        return Boolean.FALSE;
    }

    private static Boolean isNotEmpty(Object value)
    {
        return !isEmpty(value);
    }

    private static boolean compare(Object value, Vector values)
    {
        if ((value instanceof String) == false)
            throw new RuntimeException("Cannot use IN or NOTIN on non-String objects");
        
        String s1 = (String)value;
        if (values == null) {
            return false;
        }
        
        for (int i=0; i < values.size(); i++) {
            String s2 = (String)values.elementAt(i);
            if (s1.equals(s2)) {
                return true;
            }
        }
        
        return false;
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Comparator ::= NOTEMPTY 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.NOTEMPTY); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Comparator ::= EMPTY 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.EMPTY); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Comparator ::= LIKE 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.LIKE); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Comparator ::= NEQ 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.NEQ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Comparator ::= EQEQ 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.EQEQ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Comparator ::= GTE 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.GTE); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Comparator ::= LTE 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.LTE); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Comparator ::= GT 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.GT); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Comparator ::= LT 
            {
              Object RESULT = null;
		 RESULT = new Symbol(sym.LT); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Comparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Literal ::= FALSE 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = Boolean.FALSE; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Literal ::= TRUE 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = Boolean.TRUE; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Literal ::= DATE 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Literal ::= NUMBER 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = n; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Argument ::= Literal 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*Argument*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArgList ::= Argument 
            {
              Vector RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
			    Vector args = new Vector();
			    if (arg != null) args.addElement(arg);
			    RESULT = args;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*ArgList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ArgList ::= ArgList COMMA Argument 
            {
              Vector RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
			    if (args == null) args = new Vector();
			    if (arg != null) args.addElement(arg);
			    RESULT = args;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*ArgList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Arguments ::= LPAREN RPAREN 
            {
              Vector RESULT = null;
		
			    RESULT = new Vector();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Arguments*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Arguments ::= LPAREN ArgList RPAREN 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			    RESULT = list;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Arguments*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Keyword_Value ::= KEYWORD_DELIM IDENTIFIER KEYWORD_DELIM 
            {
              Object RESULT = null;
		int keywordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int keywordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object keyword = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			    RESULT = FormatterParser.getKeywordValue((String)keyword);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*Keyword_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Function_Call ::= IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getFunctionCall((String)function, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*Function_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Method_Call ::= PRODUCT PERIOD IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = null;///FormatterParser.getProductMethod((String)method, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Method_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Method_Call ::= RECEIVER PERIOD IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getReceiverMethod((String)method, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Method_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Method_Call ::= SENDER PERIOD IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getSenderMethod((String)method, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Method_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Method_Call ::= MESSAGE PERIOD IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getMessageMethod((String)method, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Method_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Method_Call ::= TRANSFER PERIOD IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getTransferMethod((String)method, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Method_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Method_Call ::= TRADE PERIOD IDENTIFIER Arguments 
            {
              Object RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT =FormatterParser.getTradeMethod((String)method, args);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Method_Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Field_Value ::= PRODUCT PERIOD IDENTIFIER 
            {
              Object RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = null;//FormatterParser.getProductField((String)field);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Field_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Field_Value ::= RECEIVER PERIOD IDENTIFIER 
            {
              Object RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getReceiverField((String)field);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Field_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Field_Value ::= SENDER PERIOD IDENTIFIER 
            {
              Object RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getSenderField((String)field);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Field_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Field_Value ::= MESSAGE PERIOD IDENTIFIER 
            {
              Object RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getMessageField((String)field);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Field_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Field_Value ::= TRANSFER PERIOD IDENTIFIER 
            {
              Object RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getTransferField((String)field);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Field_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Field_Value ::= TRADE PERIOD IDENTIFIER 
            {
              Object RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = FormatterParser.getTradeField((String)field);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Field_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Literal 
            {
              Object RESULT = null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e5; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Keyword_Value 
            {
              Object RESULT = null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e4; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Function_Call 
            {
              Object RESULT = null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e3; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Method_Call 
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e2; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Field_Value 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e1; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condition ::= NOTEMPTY Expression 
            {
              Boolean RESULT = null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? isNotEmpty(value1) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Condition ::= EMPTY Expression 
            {
              Boolean RESULT = null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? isEmpty(value1) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Condition ::= Expression NOTIN Arguments 
            {
              Boolean RESULT = null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? isNotIn(value1, args) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Condition ::= Expression IN Arguments 
            {
              Boolean RESULT = null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector args = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? isIn(value1, args) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Condition ::= Expression Comparator Expression 
            {
              Boolean RESULT = null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object value2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? compare(value1, ((Symbol)comp).sym, value2) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condition ::= NOT Condition 
            {
              Boolean RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                	    RESULT = _context.isAllValid() ? Boolean.valueOf( !c.booleanValue() ) : Boolean.FALSE;
                	
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Condition ::= LPAREN Condition RPAREN 
            {
              Boolean RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                	    RESULT = _context.isAllValid() ? c : Boolean.FALSE;
                	
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Condition ::= Condition OR Condition 
            {
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? Boolean.valueOf(a.booleanValue() || b.booleanValue()) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Condition ::= Condition AND Condition 
            {
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                            RESULT = _context.isAllValid() ? Boolean.valueOf(a.booleanValue() && b.booleanValue()) : Boolean.FALSE;
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Condition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Conditions ::= LPAREN Condition RPAREN 
            {
              Boolean RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			    RESULT = c; 
			    _context.setValid(c.booleanValue());
			    _context.setConditional(true);
			    _context.setConditionMet(_context.isConditionMet() || 
			                             _context.isValid());
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*Conditions*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // If_Else_Stmt ::= IF Conditions Simple_Stmt ELSE NT$4 Stmt 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            _context.reset();
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*If_Else_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT = null;

			    _context.setValid(!_context.isConditionMet());
			
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*NT$4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // If_Stmt ::= IF Conditions Stmt 
            {
              Object RESULT = null;
		
                            _context.reset();
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*If_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Iterator_Stmt ::= ITERATOR LPAREN STRING RPAREN NT$3 Stmt 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
			    _context.execute(ParserContext.ITERATE, (String)null);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*Iterator_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

			    _context.execute(ParserContext.ITERATE, (String)s);
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*NT$3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Set_Stmt ::= SET IDENTIFIER EQ Expression SEMIC 
            {
              Object RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			    Vector arguments = new Vector();
			    arguments.addElement(identifier);
			    arguments.addElement(value);
			    _context.execute(ParserContext.SET, arguments);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*Set_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Inline_Stmt ::= INLINE STRING SEMIC 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			    _context.execute(ParserContext.INLINE, (String)s);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*Inline_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Include_Stmt ::= INCLUDE STRING SEMIC 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			    _context.execute(ParserContext.INCLUDE, (String)s);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*Include_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Block ::= LBLOCK NT$2 Stmts RBLOCK 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            _context.popStack();
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*Block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT = null;

                            _context.pushStack();
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*NT$2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Simple_Stmt ::= Block 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Simple_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Simple_Stmt ::= Set_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Simple_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Simple_Stmt ::= Inline_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Simple_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Simple_Stmt ::= Include_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Simple_Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmt ::= error SEMIC 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmt ::= Simple_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stmt ::= Iterator_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmt ::= If_Else_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= If_Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmts ::= Stmt Stmts 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Stmts*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmts ::= Stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Stmts*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Calypso ::= START_REGEN Stmts NT$1 END 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Calypso*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

                            FormatterParser.writeCalypsoBlock(); // regenerate !
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*NT$1*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Calypso ::= START Stmts NT$0 END 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Calypso*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

                            FormatterParser.dropCalypsoBlock(); // don't regenerate !
                        
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*NT$0*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Template ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Template*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Template EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Template ::= Calypso Template 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Template*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

